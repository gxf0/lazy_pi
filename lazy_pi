#!/bin/bash

#################################################
#
# Lazy Pi-hole
# Version 1.1b
# Copyright 2018, Veit <mail@geekmonkey.de>
#
# Tested: 13.03.2018
#
#################################################

## Configure

if [ "$xf0_installer" != true ]; then
  pi_dir="/opt/pihole"
  pi_webdir="/var/www/xf0/pihole"
fi

##### DO NOT EDIT BELOW THIS LINE  ####

## xf0 Default
out="/dev/null"
mydir_pi="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
myname=$(basename $0)
string="$@"

# Colors
green='\e[92m'
red='\e[31m'
blue='\e[96m'
nc='\033[0m'

##### Start Script  ####

cmdline() {
    local arg=
    for arg
    do
        local delim=""
        case "$arg" in
            --update)         args="${args}-u ";;
            --list)           args="${args}-l ";;
            --help)           args="${args}-h ";;
            --debug)          args="${args}-x ";;
            --screen)         args="${args}-s ";;
            *) [[ "${arg:0:1}" == "-" ]] || delim="\""
                args="${args}${delim}${arg}${delim} ";;
        esac
    done
    eval set -- $args

    while getopts "ulhxs" option
    do
         case $option in
         h)
             usage
             exit 0
             ;;
         x)
             exec 5>dev-debug.log
             BASH_XTRACEFD="5"
             set -x
             ;;
         s)
             out='/dev/tty'
             ;;
         u)
             pi_do="sys"
             ;;
         l)
             pi_do="list"
             ;;

        esac
    done
    return 0
}

usage() {
    cat <<- EOF

    ----------------------------------------------------

    Usage: $myname options

    Update Pi-hole and your Block-List.
    If Pi-hole is not installed, the script will install it.

    Options:
       -u  --update   update/install pi-hole
       -l  --list   update lists
       -s  --screen		show terminal output
       -x  --debug		debug (dev-debug.log)
       -h  --help		show this help

    Examples:
       Debug script :
       $myname -x
       $myname --debug

EOF
}
##### Start Script  ####

pi_info() {
  if [ -d "$pi_dir" ]; then
    pi_installed=true
    if [ -f $pi_webdir/last_update.txt ]; then
      pi_old=true
      pi_update=$(<$pi_webdir/last_update.txt)
    fi
  else
    pi_installed=false
  fi

}

pi_start() {
starttime=$(date +%s)
  echo ""
  echo -e "${blue}============================================"
  echo -e " Lazy Pi-hole:"
  echo -e "============================================${nc}"
  if [ "$pi_old" = true ]
  then
    echo ""
    echo -e "$pi_update"
    echo ""
    echo -e "${blue}============================================${nc}"
  fi
    echo -ne '\n'
}

pi_status() {
  echo -ne "Checking Pi-hole Status:\r"
  if [ "$pi_installed" = true ]; then
    sleep 1
    echo -ne "Checking Pi-hole Status: [${green}installed${nc}]\r"
  elif [ "$pi_installed" = false ]; then
    sleep 1
    echo -ne "Checking Pi-hole Status: [${red}not installed${nc}]\r"
  fi
}

pi_install() {
  # Output
  sleep 2
  echo -ne "Checking Pi-hole Status: [${red}not installed${nc}] >> ${blue}begin setup${nc} <<\r"

  # Install
  curl -sSL https://install.pi-hole.net | bash
  service lighttpd stop > $out 2>&1
  apt-get remove -y lighttpd > $out 2>&1

  # Final Output
  echo -ne "\033[2K" ; printf "\r"
  echo -ne "Checking Pi-hole Status: [${green}installed${nc}]\r"
  echo -ne '\n'
}

pi_sys_update() {
  # Output
  sleep 2
  echo -ne "Checking Pi-hole Status: [${green}installed${nc}] >> ${blue}begin update${nc} <<\r"

  # Update
  mv $pi_webdir /var/www/html
  sleep 2
  pihole -up > $out 2>&1
  apt-get remove -y lighttpd > $out 2>&1
  mv /var/www/html $pi_webdir

  # Final Output
  echo -ne "\033[2K" ; printf "\r"
  echo -ne "Checking Pi-hole Status: [${green}updated${nc}]\r"
  echo -ne '\n'
}


pi_list_update() {
  # Output
  sleep 2
  echo -ne "Checking Pi-hole Status: [${green}installed${nc}] >> ${blue}begin update${nc} <<\r"

  #Update List
  curl -s -L https://easylist.to/easylist/easylist.txt https://easylist.to/easylist/easyprivacy.txt https://easylist.to/easylist/fanboy-annoyance.txt https://easylist.to/easylist/fanboy-social.txt > adblock.unsorted
  sort -u adblock.unsorted | grep ^\|\|.*\^$ | grep -v \/ > adblock.sorted
  sed 's/[\|^]//g' < adblock.sorted > $pi_webdir/admin/adblock.hosts
  rm adblock.unsorted adblock.sorted
  pihole -g > $out 2>&1
  echo "Last Update: $(date +%d.%m.%Y) - $(date +%H:%M)" > $pi_webdir/last_update.txt

  # Final Output
  echo -ne "\033[2K" ; printf "\r"
  echo -ne "Checking Pi-hole Status: [${green}updated${nc}]\r"
  echo -ne '\n'
}

pi_end() {
      endtime=$[$(date +%s)-$starttime]
      echo -e "${blue}============================================"
      echo -e "  done (duration: $endtime seconds)"
      echo -e "============================================${nc}"
      echo ""
}

main() {
  cmdline $string
  pi_info
  if [ "$xf0_installer" != true ]; then
    pi_start
  fi
  pi_status
  if [ "$pi_installed" = false ] && [ "$pi_do" = sys ]; then
    pi_install
  fi
  if [ "$pi_installed" = true ] && [ "$pi_do" = sys ]; then
    pi_sys_update
  fi
  if [ "$pi_installed" = true ] && [ "$pi_do" = list ]; then
    pi_list_update
  elif [ "$pi_installed" = false ] && [ "$pi_do" = list ]; then
    echo -ne "Checking Pi-hole Status: [${red}not installed${nc}] >> ${blue}can't update list${nc} <<\r"
    echo -ne '\n'
  fi
  if [ "$xf0_installer" != true ]; then
    pi_end
  fi
}

main
